name: Deploy OCI VM with Terraform

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: 'ENTER Name of VM'
        required: true
        default: 'MyTerraformVM'

jobs:
  terraform:
    runs-on: self-hosted

    steps:
    # - name: Checkout code
    #   uses: actions/checkout@v4
  
    - name: Set up SSH Private Key
      run: |
        echo "" > /home/ubuntu/.ssh/authorized_keys
      # env:
      #   TF_VAR_ssh_private_key_path: ~/.ssh/bastion_instance_private_key.pem  # Pass the path to Terraform (this is self-hosted runner machine path)

    # - name: Terraform Init
    #   run: | 
    #     cd Bastion-host
    #     terraform init -upgrade

    # - name: Terraform Apply
    #   run: | 
    #     cd Bastion-host 
    #     terraform apply -auto-approve
    #   env:
    #     TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
    #     TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
    #     TF_VAR_fingerprint: ${{ secrets.OCI_KEY_FINGERPRINT }}
    #     TF_VAR_region: ${{ secrets.OCI_REGION }}
    #     TF_VAR_compartment_id: ${{ secrets.OCI_COMPARTMENT_ID }}
    #     TF_VAR_availability_domain: ${{ secrets.OCI_AVAILABILITY_DOMAIN }}
    #     TF_VAR_subnet_id: ${{ secrets.OCI_SUBNET_ID }}
    #     TF_VAR_image_id: ${{ secrets.OCI_IMAGE_ID }}
    #     TF_VAR_ssh_public_key: "${{ secrets.OCI_SSH_PUBLIC_KEY }}"  # Pass public key content directly
    #     TF_VAR_oci_private_key: "${{ secrets.USER_OCI_PRIVATE_KEY }}"
    #     TF_VAR_ssh_private_key_path: ~/.ssh/bastion_instance_private_key.pem  # Pass the path to Terraform (this is self-hosted runner machine path)
    #     TF_VAR_oci_config_content: "${{ secrets.OCI_CONFIG_CONTENT }}"
    #     TF_VAR_vm_display_name: "${{ github.event.inputs.vm_name }}"
